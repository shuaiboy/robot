一. let
	1. 只在自己的代码块中有效
	2. 不存在变量提升，所以变量一定要声明后使用
	3. 暂歇性假死，变量只能声明后使用，不然会报错，使用typeof判断变量也不是一个绝对安全的方式了
	4. 不允许在同一个块级作用域内重复声明变量

二. 块级作用域
	1.


三. 结构赋值
	1. 如果结构不成功， 变量的值就是undefined
	2. 不完全结构，等号左边的模式只匹配右边模式的一部分，也可结构成功
	3. 如果等号右边不是数组（严格说不是可以遍历的结构）， 那么将会报错
	4. 结构赋值不止适用于var， let, const命令都可以
	5. 结构赋值如果右边不是对象，那么就先转换成对象在进行赋值， null和undefined不能装换为对象，所以null和undefined结构赋值会报错
	6. 函数参数也可以进行结构赋值

	圆括号问题
	1. 变量在声明中不能使用圆括号， 函数参数也属于变量声明， 所以也不能带有圆括号

	...f 会当做一个数组来处理

	let [a, ...f] = [1, 2, 3, 4, 5] ;
	let a = 2 ;
	let f = [2, 3, 4, 5] ;

	let [a, b, ...f] = [1] ;
	let a = 1 ;
	let b = undefined ;
	let f = [] ;

四. 字符串模板， 模板用两个反引号包裹起来（``）, 里边可以放入任意的表达式


??????????????????????????????????????????????????????
当使用类的时候类中的方法想要调用另外一个类的方法， 会报错， 这个时候里边的this是这个方法本身， 可以在constructor中执行绑定